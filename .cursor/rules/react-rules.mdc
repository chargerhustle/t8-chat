---
description: 
globs: 
alwaysApply: true
---
# Rules of React
Just as different programming languages have their own ways of expressing concepts, React has its own idioms ‚Äî or rules ‚Äî for how to express patterns in a way that is easy to understand and yields high-quality applications.

This section describes the rules you need to follow to write idiomatic React code. Writing idiomatic React code can help you write well organized, safe, and composable applications. These properties make your app more resilient to changes and makes it easier to work with other developers, libraries, and tools.

These rules are known as the Rules of React. They are rules ‚Äì and not just guidelines ‚Äì in the sense that if they are broken, your app likely has bugs. Your code also becomes unidiomatic and harder to understand and reason about.

## Components and Hooks must be pure 
Purity in Components and Hooks is a key rule of React that makes your app predictable, easy to debug, and allows React to automatically optimize your code.

- Components must be idempotent ‚Äì React components are assumed to always return the same output with respect to their inputs ‚Äì props, state, and context.
- Side effects must run outside of render ‚Äì Side effects should not run in render, as React can render components multiple times to create the best possible user experience.
- Props and state are immutable ‚Äì A component‚Äôs props and state are immutable snapshots with respect to a single render. Never mutate them directly.
- Return values and arguments to Hooks are immutable ‚Äì Once values are passed to a Hook, you should not modify them. Like props in JSX, values become immutable when passed to a Hook.
- Values are immutable after being passed to JSX ‚Äì Don‚Äôt mutate values after they‚Äôve been used in JSX. Move the mutation before the JSX is created.

## React calls Components and Hooks 
React is responsible for rendering components and hooks when necessary to optimize the user experience. It is declarative: you tell React what to render in your component‚Äôs logic, and React will figure out how best to display it to your user.

- Never call component functions directly ‚Äì Components should only be used in JSX. Don‚Äôt call them as regular functions.
- Never pass around hooks as regular values ‚Äì Hooks should only be called inside of components. Never pass it around as a regular value.

## Rules of Hooks 
Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called. You need to follow the Rules of Hooks when using them.

- Only call Hooks at the top level ‚Äì Don‚Äôt call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function, before any early returns.
- Only call Hooks from React functions ‚Äì Don‚Äôt call Hooks from regular JavaScript functions.

# Components and Hooks must be pure
Pure functions only perform a calculation and nothing more. It makes your code easier to understand, debug, and allows React to automatically optimize your components and Hooks correctly.

## Why does purity matter? 
One of the key concepts that makes React, React is purity. A pure component or hook is one that is:

- Idempotent ‚Äì You always get the same result every time you run it with the same inputs ‚Äì props, state, context for component inputs; and arguments for hook inputs.
- Has no side effects in render ‚Äì Code with side effects should run separately from rendering. For example as an event handler ‚Äì where the user interacts with the UI and causes it to update; or as an Effect ‚Äì which runs after render.
- Does not mutate non-local values: Components and Hooks should never modify values that aren‚Äôt created locally in render.

When render is kept pure, React can understand how to prioritize which updates are most important for the user to see first. This is made possible because of render purity: since components don‚Äôt have side effects in render, React can pause rendering components that aren‚Äôt as important to update, and only come back to them later when it‚Äôs needed.

Concretely, this means that rendering logic can be run multiple times in a way that allows React to give your user a pleasant user experience. However, if your component has an untracked side effect ‚Äì like modifying the value of a global variable during render ‚Äì when React runs your rendering code again, your side effects will be triggered in a way that won‚Äôt match what you want. This often leads to unexpected bugs that can degrade how your users experience your app. You can see an example of this in the Keeping Components Pure page.

## How does React run your code? 
React is declarative: you tell React what to render, and React will figure out how best to display it to your user. To do this, React has a few phases where it runs your code. You don‚Äôt need to know about all of these phases to use React well. But at a high level, you should know about what code runs in render, and what runs outside of it.

Rendering refers to calculating what the next version of your UI should look like. After rendering, Effects are flushed (meaning they are run until there are no more left) and may update the calculation if the Effects have impacts on layout. React takes this new calculation and compares it to the calculation used to create the previous version of your UI, then commits just the minimum changes needed to the DOM (what your user actually sees) to catch it up to the latest version.

## Components and Hooks must be idempotent 
Components must always return the same output with respect to their inputs ‚Äì props, state, and context. This is known as idempotency. Idempotency is a term popularized in functional programming. It refers to the idea that you always get the same result every time you run that piece of code with the same inputs.

This means that all code that runs during render must also be idempotent in order for this rule to hold. For example, this line of code is not idempotent (and therefore, neither is the component):

```tsx
function Clock() {
  const time = new Date(); // üî¥ Bad: always returns a different result!
  return <span>{time.toLocaleString()}</span>
}
```

`new Date()` is not idempotent as it always returns the current date and changes its result every time it‚Äôs called. When you render the above component, the time displayed on the screen will stay stuck on the time that the component was rendered. Similarly, functions like Math.random() also aren‚Äôt idempotent, because they return different results every time they‚Äôre called, even when the inputs are the same.

This doesn‚Äôt mean you shouldn‚Äôt use non-idempotent functions like `new Date()` at all ‚Äì you should just avoid using them during render. In this case, we can synchronize the latest date to this component using an Effect:

```js
import { useState, useEffect } from 'react';

function useTime() {
  // 1. Keep track of the current date's state. `useState` receives an initializer function as its
  //    initial state. It only runs once when the hook is called, so only the current date at the
  //    time the hook is called is set first.
  const [time, setTime] = useState(() => new Date());

  useEffect(() => {
    // 2. Update the current date every second using `setInterval`.
    const id = setInterval(() => {
      setTime(new Date()); // ‚úÖ Good: non-idempotent code no longer runs in render
    }, 1000);
    // 3. Return a cleanup function so we don't leak the `setInterval` timer.
    return () => clearInterval(id);
  }, []);

  return time;
}

export default function Clock() {
  const time = useTime();
  return <span>{time.toLocaleString()}</span>;
}

```

By wrapping the non-idempotent `new Date()` call in an Effect, it moves that calculation outside of rendering.

If you don‚Äôt need to synchronize some external state with React, you can also consider using an event handler if it only needs to be updated in response to a user interaction.

---


## Side effects must run outside of render 
Side effects should not run in render, as React can render components multiple times to create the best possible user experience.

While render must be kept pure, side effects are necessary at some point in order for your app to do anything interesting, like showing something on the screen! The key point of this rule is that side effects should not run in render, as React can render components multiple times. In most cases, you‚Äôll use event handlers to handle side effects. Using an event handler explicitly tells React that this code doesn‚Äôt need to run during render, keeping render pure. If you‚Äôve exhausted all options ‚Äì and only as a last resort ‚Äì you can also handle side effects using `useEffect`.

## When is it okay to have mutation? 
### Local mutation 
One common example of a side effect is mutation, which in JavaScript refers to changing the value of a non-primitive value. In general, while mutation is not idiomatic in React, local mutation is absolutely fine:

```tsx
function FriendList({ friends }) {
  const items = []; // ‚úÖ Good: locally created
  for (let i = 0; i < friends.length; i++) {
    const friend = friends[i];
    items.push(
      <Friend key={friend.id} friend={friend} />
    ); // ‚úÖ Good: local mutation is okay
  }
  return <section>{items}</section>;
}
```
There is no need to contort your code to avoid local mutation. Array.map could also be used here for brevity, but there is nothing wrong with creating a local array and then pushing items into it during render.

Even though it looks like we are mutating items, the key point to note is that this code only does so locally ‚Äì the mutation isn‚Äôt ‚Äúremembered‚Äù when the component is rendered again. In other words, items only stays around as long as the component does. Because items is always recreated every time <FriendList /> is rendered, the component will always return the same result.

On the other hand, if items was created outside of the component, it holds on to its previous values and remembers changes:

```tsx
const items = []; // üî¥ Bad: created outside of the component
function FriendList({ friends }) {
  for (let i = 0; i < friends.length; i++) {
    const friend = friends[i];
    items.push(
      <Friend key={friend.id} friend={friend} />
    ); // üî¥ Bad: mutates a value created outside of render
  }
  return <section>{items}</section>;
}
```

When <FriendList /> runs again, we will continue appending friends to items every time that component is run, leading to multiple duplicated results. This version of <FriendList /> has observable side effects during render and breaks the rule.

### Lazy initialization 
Lazy initialization is also fine despite not being fully ‚Äúpure‚Äù:

```tsx
function ExpenseForm() {
  SuperCalculator.initializeIfNotReady(); // ‚úÖ Good: if it doesn't affect other components
  // Continue rendering...
}
```

### Changing the DOM 
Side effects that are directly visible to the user are not allowed in the render logic of React components. In other words, merely calling a component function shouldn‚Äôt by itself produce a change on the screen.

```tsx
function ProductDetailPage({ product }) {
  document.title = product.title; // üî¥ Bad: Changes the DOM
}
```

One way to achieve the desired result of updating document.title outside of render is to synchronize the component with document.

As long as calling a component multiple times is safe and doesn‚Äôt affect the rendering of other components, React doesn‚Äôt care if it‚Äôs 100% pure in the strict functional programming sense of the word. It is more important that components must be idempotent.

---

## Props and state are immutable 
A component‚Äôs props and state are immutable snapshots. Never mutate them directly. Instead, pass new props down, and use the setter function from useState.

You can think of the props and state values as snapshots that are updated after rendering. For this reason, you don‚Äôt modify the props or state variables directly: instead you pass new props, or use the setter function provided to you to tell React that state needs to update the next time the component is rendered.

### Don‚Äôt mutate Props 
Props are immutable because if you mutate them, the application will produce inconsistent output, which can be hard to debug as it may or may not work depending on the circumstances.

```tsx
function Post({ item }) {
  item.url = new Url(item.url, base); // üî¥ Bad: never mutate props directly
  return <Link url={item.url}>{item.title}</Link>;
}
```

```tsx
function Post({ item }) {
  const url = new Url(item.url, base); // ‚úÖ Good: make a copy instead
  return <Link url={url}>{item.title}</Link>;
}
```

### Don‚Äôt mutate State 
`useState` returns the state variable and a setter to update that state.

```tsx
const [stateVariable, setter] = useState(0);
```

Rather than updating the state variable in-place, we need to update it using the setter function that is returned by useState. Changing values on the state variable doesn‚Äôt cause the component to update, leaving your users with an outdated UI. Using the setter function informs React that the state has changed, and that we need to queue a re-render to update the UI.

```tsx
function Counter() {
  const [count, setCount] = useState(0);

  function handleClick() {
    count = count + 1; // üî¥ Bad: never mutate state directly
  }

  return (
    <button onClick={handleClick}>
      You pressed me {count} times
    </button>
  );
}
```

```tsx
function Counter() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1); // ‚úÖ Good: use the setter function returned by useState
  }

  return (
    <button onClick={handleClick}>
      You pressed me {count} times
    </button>
  );
}
```

---

## Return values and arguments to Hooks are immutable 
Once values are passed to a hook, you should not modify them. Like props in JSX, values become immutable when passed to a hook.

```tsx
function useIconStyle(icon) {
  const theme = useContext(ThemeContext);
  if (icon.enabled) {
    icon.className = computeStyle(icon, theme); // üî¥ Bad: never mutate hook arguments directly
  }
  return icon;
}
```

```tsx
function useIconStyle(icon) {
  const theme = useContext(ThemeContext);
  const newIcon = { ...icon }; // ‚úÖ Good: make a copy instead
  if (icon.enabled) {
    newIcon.className = computeStyle(icon, theme);
  }
  return newIcon;
}
```
One important principle in React is local reasoning: the ability to understand what a component or hook does by looking at its code in isolation. Hooks should be treated like ‚Äúblack boxes‚Äù when they are called. For example, a custom hook might have used its arguments as dependencies to memoize values inside it:

```tsx
function useIconStyle(icon) {
  const theme = useContext(ThemeContext);

  return useMemo(() => {
    const newIcon = { ...icon };
    if (icon.enabled) {
      newIcon.className = computeStyle(icon, theme);
    }
    return newIcon;
  }, [icon, theme]);
}
```

If you were to mutate the Hook‚Äôs arguments, the custom hook‚Äôs memoization will become incorrect,  so it‚Äôs important to avoid doing that.

```tsx
style = useIconStyle(icon);         // `style` is memoized based on `icon`
icon.enabled = false;               // Bad: üî¥ never mutate hook arguments directly
style = useIconStyle(icon);         // previously memoized result is returned
```

```tsx
style = useIconStyle(icon);         // `style` is memoized based on `icon`
icon = { ...icon, enabled: false }; // Good: ‚úÖ make a copy instead
style = useIconStyle(icon);         // new value of `style` is calculated
```

Similarly, it‚Äôs important to not modify the return values of Hooks, as they may have been memoized.

---

##Values are immutable after being passed to JSX 
Don‚Äôt mutate values after they‚Äôve been used in JSX. Move the mutation to before the JSX is created.

When you use JSX in an expression, React may eagerly evaluate the JSX before the component finishes rendering. This means that mutating values after they‚Äôve been passed to JSX can lead to outdated UIs, as React won‚Äôt know to update the component‚Äôs output.

```tsx
function Page({ colour }) {
  const styles = { colour, size: "large" };
  const header = <Header styles={styles} />;
  styles.size = "small"; // üî¥ Bad: styles was already used in the JSX above
  const footer = <Footer styles={styles} />;
  return (
    <>
      {header}
      <Content />
      {footer}
    </>
  );
}
```

```tsx
function Page({ colour }) {
  const headerStyles = { colour, size: "large" };
  const header = <Header styles={headerStyles} />;
  const footerStyles = { colour, size: "small" }; // ‚úÖ Good: we created a new value
  const footer = <Footer styles={footerStyles} />;
  return (
    <>
      {header}
      <Content />
      {footer}
    </>
  );
}
```

# React calls Components and Hooks

React is responsible for rendering components and Hooks when necessary to optimize the user experience. It is declarative: you tell React what to render in your component‚Äôs logic, and React will figure out how best to display it to your user.

-Never call component functions directly
-Never pass around Hooks as regular values
  -Don‚Äôt dynamically mutate a Hook
  -Don‚Äôt dynamically use Hooks

---

## Never call component functions directly 
Components should only be used in JSX. Don‚Äôt call them as regular functions. React should call it.

React must decide when your component function is called during rendering. In React, you do this using JSX.

```tsx
function BlogPost() {
  return <Layout><Article /></Layout>; // ‚úÖ Good: Only use components in JSX
}
```

```tsx
function BlogPost() {
  return <Layout>{Article()}</Layout>; // üî¥ Bad: Never call them directly
}
```

If a component contains Hooks, it‚Äôs easy to violate the Rules of Hooks when components are called directly in a loop or conditionally.

Letting React orchestrate rendering also allows a number of benefits:

- Components become more than functions. React can augment them with features like local state through Hooks that are tied to the component‚Äôs identity in the tree.
- Component types participate in reconciliation. By letting React call your components, you also tell it more about the conceptual structure of your tree. For example, when you move from rendering <Feed> to the <Profile> page, React won‚Äôt attempt to re-use them.
- React can enhance your user experience. For example, it can let the browser do some work between component calls so that re-rendering a large component tree doesn‚Äôt block the main thread.
- A better debugging story. If components are first-class citizens that the library is aware of, we can build rich developer tools for introspection in development.
- More efficient reconciliation. React can decide exactly which components in the tree need re-rendering and skip over the ones that don‚Äôt. That makes your app faster and more snappy.

---

## Never pass around Hooks as regular values 
Hooks should only be called inside of components or Hooks. Never pass it around as a regular value.

Hooks allow you to augment a component with React features. They should always be called as a function, and never passed around as a regular value. This enables local reasoning, or the ability for developers to understand everything a component can do by looking at that component in isolation.

Breaking this rule will cause React to not automatically optimize your component.

### Don‚Äôt dynamically mutate a Hook 

```tsx
function ChatInput() {
  const useDataWithLogging = withLogging(useData); // üî¥ Bad: don't write higher order Hooks
  const data = useDataWithLogging();
}
```

Hooks should be immutable and not be mutated. Instead of mutating a Hook dynamically, create a static version of the Hook with the desired functionality.

```tsx
function ChatInput() {
  const data = useDataWithLogging(); // ‚úÖ Good: Create a new version of the Hook
}
```

```tsx
function useDataWithLogging() {
  // ... Create a new version of the Hook and inline the logic here
}
```

### Don‚Äôt dynamically use Hooks 
Hooks should also not be dynamically used: for example, instead of doing dependency injection in a component by passing a Hook as a value:

```tsx
function ChatInput() {
  return <Button useData={useDataWithLogging} /> // üî¥ Bad: don't pass Hooks as props
}
```

You should always inline the call of the Hook into that component and handle any logic in there.

```tsx
function ChatInput() {
  return <Button />
}

function Button() {
  const data = useDataWithLogging(); // ‚úÖ Good: Use the Hook directly
}

function useDataWithLogging() {
  // If there's any conditional logic to change the Hook's behavior, it should be inlined into
  // the Hook
}
```

This way, <Button /> is much easier to understand and debug. When Hooks are used in dynamic ways, it increases the complexity of your app greatly and inhibits local reasoning, making your team less productive in the long term. It also makes it easier to accidentally break the Rules of Hooks that Hooks should not be called conditionally. If you find yourself needing to mock components for tests, it‚Äôs better to mock the server instead to respond with canned data. If possible, it‚Äôs also usually more effective to test your app with end-to-end tests.

# Rules of Hooks

Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.

- Only call Hooks at the top level
- Only call Hooks from React functions

---

## Only call Hooks at the top level 
Functions whose names start with use are called Hooks in React.

Don‚Äôt call Hooks inside loops, conditions, nested functions, or try/catch/finally blocks. Instead, always use Hooks at the top level of your React function, before any early returns. You can only call Hooks while React is rendering a function component:

- ‚úÖ Call them at the top level in the body of a function component.
- ‚úÖ Call them at the top level in the body of a custom Hook.

```tsx
function Counter() {
  // ‚úÖ Good: top-level in a function component
  const [count, setCount] = useState(0);
  // ...
}

function useWindowWidth() {
  // ‚úÖ Good: top-level in a custom Hook
  const [width, setWidth] = useState(window.innerWidth);
  // ...
}
```

It‚Äôs not supported to call Hooks (functions starting with use) in any other cases, for example:

- üî¥ Do not call Hooks inside conditions or loops.
- üî¥ Do not call Hooks after a conditional return statement.
- üî¥ Do not call Hooks in event handlers.
- üî¥ Do not call Hooks in class components.
- üî¥ Do not call Hooks inside functions passed to useMemo, useReducer, or useEffect.
- üî¥ Do not call Hooks inside try/catch/finally blocks.

If you break these rules, you might see this error.

```tsx
function Bad({ cond }) {
  if (cond) {
    // üî¥ Bad: inside a condition (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad() {
  for (let i = 0; i < 10; i++) {
    // üî¥ Bad: inside a loop (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad({ cond }) {
  if (cond) {
    return;
  }
  // üî¥ Bad: after a conditional return (to fix, move it before the return!)
  const theme = useContext(ThemeContext);
  // ...
}

function Bad() {
  function handleClick() {
    // üî¥ Bad: inside an event handler (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad() {
  const style = useMemo(() => {
    // üî¥ Bad: inside useMemo (to fix, move it outside!)
    const theme = useContext(ThemeContext);
    return createStyle(theme);
  });
  // ...
}

class Bad extends React.Component {
  render() {
    // üî¥ Bad: inside a class component (to fix, write a function component instead of a class!)
    useEffect(() => {})
    // ...
  }
}

function Bad() {
  try {
    // üî¥ Bad: inside try/catch/finally block (to fix, move it outside!)
    const [x, setX] = useState(0);
  } catch {
    const [x, setX] = useState(1);
  }
}
```

Note: Custom Hooks may call other Hooks (that‚Äôs their whole purpose). This works because custom Hooks are also supposed to only be called while a function component is rendering.

---

## Only call Hooks from React functions 
Don‚Äôt call Hooks from regular JavaScript functions. Instead, you can:

- ‚úÖ Call Hooks from React function components.
- ‚úÖ Call Hooks from custom Hooks.

By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.

```tsx
function FriendList() {
  const [onlineStatus, setOnlineStatus] = useOnlineStatus(); // ‚úÖ
}

function setOnlineStatus() { // ‚ùå Not a component or custom Hook!
  const [onlineStatus, setOnlineStatus] = useOnlineStatus();
}
```